{
  "name": "satellite",
  "chain": "ethereum",
  "blockNumber": 18013709,
  "configHash": "0x34376043c9e3e49c21e4850f9158c628650b639546c349c020a425a6a42a4a51",
  "version": 2,
  "contracts": [
    {
      "name": "AxelarAuthWeighted",
      "address": "0x228b92510130ec2E09C6d5645039c8cB834aD42d",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "currentEpoch": 192,
        "owner": "0x4F4495243837681061C4743b74B3eEdf548D56A5"
      },
      "derivedName": "AxelarAuthWeighted"
    },
    {
      "name": "SatelliteGateway",
      "address": "0x4F4495243837681061C4743b74B3eEdf548D56A5",
      "upgradeability": {
        "type": "call implementation proxy",
        "implementation": "0xEd9938294aCF9EE52D097133CA2cAafF0C804F16"
      },
      "values": {
        "adminEpoch": 3,
        "allTokensFrozen": false,
        "authModule": "0x228b92510130ec2E09C6d5645039c8cB834aD42d",
        "implementation": "0xEd9938294aCF9EE52D097133CA2cAafF0C804F16",
        "tokenDeployer": "0xe88Ab68Cd69e92294FcC3BBBD894Fb183197fA39",
        "tokens": {
          "AXL": [
            "0x3eacbDC6C382ea22b78aCc158581A55aaF4ef3Cc",
            "0x467719aD09025FcC6cF6F8311755809d45a5E5f3"
          ],
          "UST": "0x085416975fe14C2A731a97eC38B9bF8135231F62",
          "LUNA": "0x31DAB3430f3081dfF3Ccd80F17AD98583437B213",
          "axlATOM": "0x27292cf0016E5dF1d8b37306B2A98588aCbD6fCA",
          "USDC": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "axlJUNO": "0xEBD3a5c8b759BD0C24518e0CD25E18cCBdd724aC",
          "FRAX": "0x853d955aCEf822Db058eb8505911ED77F175b99e",
          "DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
          "USDT": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
          "NGM": "0x08fe7A0db575c2a08d76EEcA71763E48C6e60F45",
          "EEUR": "0xDd26a5c8Ae5b60Bb14aEcED892A052CA48A2e915",
          "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "WBTC": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
          "stETH": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
          "APE": "0x4d224452801ACEd8B2F0aebE155379bb5D594381",
          "UNI": "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
          "LINK": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "SHIB": "0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE",
          "AXS": "0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b",
          "XCN": "0xA2cd3D43c775978A96BdBf12d733D5A1ED94fb18",
          "MKR": "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
          "AAVE": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
          "RAI": "0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919",
          "BUSD": "0x4Fabb145d64652a948d72533023f6E7A623C7C53",
          "STRD": "0x85eBBf7253295d37C5FC98bE5Aac87CA4378c2e2",
          "stATOM": "0x2924894E7886C6B9018179946EE389bb06534021",
          "axlFIL": "0x6A7b717aE5Ed65F85BA25403D5063D368239828e",
          "wstETH": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
          "cbETH": "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
          "frxETH": "0x5E8422345238F34275888049021821E8E08CAa1f",
          "rETH": "0xae78736Cd615f374D3085123A210448E74Fc6393",
          "sfrxETH": "0xac3E018457B222d93114458476f3E3416Abbe38F",
          "PEPE": "0x6982508145454Ce325dDbE47a25d4ec3d2311933",
          "YieldETH": "0xb5b29320d2Dde5BA5BAFA1EbcD270052070483ec",
          "YieldUSD": "0x97e6E0a40a3D02F12d1cEC30ebfbAE04e37C119E",
          "WMAI": "0x05770332D4410b6D7f07Fd497E4c00F8F7bFb74A",
          "UMEE": "0x923e030f951A2401426a3407a9bcc7EB715d9a0b",
          "ERN": "0x91A69021b0BaeF3445E51726458a0CE601471846",
          "axlLqdr": "0x98504C8afa7c74c87a0641a7bb0F7968d4e8F471",
          "WDOGE": "0x8aa9381b2544b48c26f3b850F6e07E2c5161EB3e",
          "POLS": "0x83e6f1E41cdd28eAcEB20Cb649155049Fac3D5Aa",
          "ORBS": "0xff56Cc6b1E6dEd347aA0B7676C85AB0B3D08B0FA",
          "KNC": "0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202",
          "OATH": "0xd20523b39fAF1D6e9023a4D6085f87B7b0DE7926",
          "GDX": "0x89901994b5Ed81cbbcBC4E5A7e0cC4e7F58e5458",
          "axlDEUS": "0x69e557b926F4eEf6d9400e36DBBFEb9600Af2880",
          "stERN": "0xeA0cFDC2667bE69ED724c8069d358502fF41cA18"
        },
        "admins": [
          [
            "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
            "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
            "0x5C8EF9ca7b43c93Ac4a146BeF77FAFbc7D3e69B7",
            "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
            "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
            "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f",
            "0x027c1882B975E2cd771AE068b0389FA38B9dda73",
            "0x30932Ac1f0477Fbd63E4c5Be1928f367A58A45A1"
          ],
          [
            "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
            "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
            "0x5C8EF9ca7b43c93Ac4a146BeF77FAFbc7D3e69B7",
            "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
            "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
            "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f",
            "0x027c1882B975E2cd771AE068b0389FA38B9dda73",
            "0x30932Ac1f0477Fbd63E4c5Be1928f367A58A45A1"
          ],
          [
            "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
            "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
            "0x5C8EF9ca7b43c93Ac4a146BeF77FAFbc7D3e69B7",
            "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
            "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
            "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f",
            "0x027c1882B975E2cd771AE068b0389FA38B9dda73",
            "0x30932Ac1f0477Fbd63E4c5Be1928f367A58A45A1"
          ]
        ],
        "adminThreshold": [4, 4, 4]
      },
      "derivedName": "AxelarGateway"
    },
    {
      "name": "TokenDeployer",
      "address": "0xe88Ab68Cd69e92294FcC3BBBD894Fb183197fA39",
      "upgradeability": {
        "type": "immutable"
      }
    }
  ],
  "eoas": [
    "0x027c1882B975E2cd771AE068b0389FA38B9dda73",
    "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
    "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
    "0x30932Ac1f0477Fbd63E4c5Be1928f367A58A45A1",
    "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
    "0x5C8EF9ca7b43c93Ac4a146BeF77FAFbc7D3e69B7",
    "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
    "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f"
  ],
  "abis": {
    "0x228b92510130ec2E09C6d5645039c8cB834aD42d": [
      "constructor(bytes[] recentOperators)",
      "error DuplicateOperators()",
      "error InvalidOperators()",
      "error InvalidOwner()",
      "error InvalidS()",
      "error InvalidSignature()",
      "error InvalidSignatureLength()",
      "error InvalidThreshold()",
      "error InvalidV()",
      "error InvalidWeights()",
      "error LowSignaturesWeight()",
      "error MalformedSigners()",
      "error NotOwner()",
      "event OperatorshipTransferred(address[] newOperators, uint256[] newWeights, uint256 newThreshold)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function currentEpoch() view returns (uint256)",
      "function epochForHash(bytes32) view returns (uint256)",
      "function hashForEpoch(uint256) view returns (bytes32)",
      "function owner() view returns (address)",
      "function transferOperatorship(bytes params)",
      "function transferOwnership(address newOwner)",
      "function validateProof(bytes32 messageHash, bytes proof) view returns (bool)"
    ],
    "0x4F4495243837681061C4743b74B3eEdf548D56A5": [
      "constructor(bytes params)",
      "function getAddress(bytes32 key) view returns (address)",
      "function getBool(bytes32 key) view returns (bool)",
      "function getBytes(bytes32 key) view returns (bytes)",
      "function getInt(bytes32 key) view returns (int256)",
      "function getString(bytes32 key) view returns (string)",
      "function getUint(bytes32 key) view returns (uint256)",
      "function setup(bytes params)"
    ],
    "0xe88Ab68Cd69e92294FcC3BBBD894Fb183197fA39": [
      "function deployToken(string name, string symbol, uint8 decimals, uint256 cap, bytes32 salt) returns (address tokenAddress)"
    ],
    "0xEd9938294aCF9EE52D097133CA2cAafF0C804F16": [
      "constructor(address authModule_, address tokenDeployerImplementation_)",
      "error AlreadyVoted()",
      "error BurnFailed(string symbol)",
      "error DuplicateAdmin(address admin)",
      "error ExceedMintLimit(string symbol)",
      "error InvalidAdminThreshold()",
      "error InvalidAdmins()",
      "error InvalidAmount()",
      "error InvalidAuthModule()",
      "error InvalidChainId()",
      "error InvalidCodeHash()",
      "error InvalidCommands()",
      "error InvalidSetMintLimitsParams()",
      "error InvalidTokenDeployer()",
      "error MintFailed(string symbol)",
      "error NotAdmin()",
      "error NotProxy()",
      "error NotSelf()",
      "error SetupFailed()",
      "error TokenAlreadyExists(string symbol)",
      "error TokenContractDoesNotExist(address token)",
      "error TokenDeployFailed(string symbol)",
      "error TokenDoesNotExist(string symbol)",
      "event ContractCall(address indexed sender, string destinationChain, string destinationContractAddress, bytes32 indexed payloadHash, bytes payload)",
      "event ContractCallApproved(bytes32 indexed commandId, string sourceChain, string sourceAddress, address indexed contractAddress, bytes32 indexed payloadHash, bytes32 sourceTxHash, uint256 sourceEventIndex)",
      "event ContractCallApprovedWithMint(bytes32 indexed commandId, string sourceChain, string sourceAddress, address indexed contractAddress, bytes32 indexed payloadHash, string symbol, uint256 amount, bytes32 sourceTxHash, uint256 sourceEventIndex)",
      "event ContractCallWithToken(address indexed sender, string destinationChain, string destinationContractAddress, bytes32 indexed payloadHash, bytes payload, string symbol, uint256 amount)",
      "event Executed(bytes32 indexed commandId)",
      "event OperatorshipTransferred(bytes newOperatorsData)",
      "event TokenDeployed(string symbol, address tokenAddresses)",
      "event TokenMintLimitUpdated(string symbol, uint256 limit)",
      "event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount)",
      "event Upgraded(address indexed implementation)",
      "function adminEpoch() view returns (uint256)",
      "function adminThreshold(uint256 epoch) view returns (uint256)",
      "function admins(uint256 epoch) view returns (address[] results)",
      "function allTokensFrozen() pure returns (bool)",
      "function approveContractCall(bytes params, bytes32 commandId)",
      "function approveContractCallWithMint(bytes params, bytes32 commandId)",
      "function authModule() view returns (address)",
      "function burnToken(bytes params, bytes32)",
      "function callContract(string destinationChain, string destinationContractAddress, bytes payload)",
      "function callContractWithToken(string destinationChain, string destinationContractAddress, bytes payload, string symbol, uint256 amount)",
      "function deployToken(bytes params, bytes32)",
      "function execute(bytes input)",
      "function getAddress(bytes32 key) view returns (address)",
      "function getBool(bytes32 key) view returns (bool)",
      "function getBytes(bytes32 key) view returns (bytes)",
      "function getInt(bytes32 key) view returns (int256)",
      "function getString(bytes32 key) view returns (string)",
      "function getUint(bytes32 key) view returns (uint256)",
      "function implementation() view returns (address)",
      "function isCommandExecuted(bytes32 commandId) view returns (bool)",
      "function isContractCallAndMintApproved(bytes32 commandId, string sourceChain, string sourceAddress, address contractAddress, bytes32 payloadHash, string symbol, uint256 amount) view returns (bool)",
      "function isContractCallApproved(bytes32 commandId, string sourceChain, string sourceAddress, address contractAddress, bytes32 payloadHash) view returns (bool)",
      "function mintToken(bytes params, bytes32)",
      "function sendToken(string destinationChain, string destinationAddress, string symbol, uint256 amount)",
      "function setTokenMintLimits(string[] symbols, uint256[] limits)",
      "function setup(bytes params)",
      "function tokenAddresses(string symbol) view returns (address)",
      "function tokenDeployer() view returns (address)",
      "function tokenFrozen(string) pure returns (bool)",
      "function tokenMintAmount(string symbol) view returns (uint256)",
      "function tokenMintLimit(string symbol) view returns (uint256)",
      "function transferOperatorship(bytes newOperatorsData, bytes32)",
      "function upgrade(address newImplementation, bytes32 newImplementationCodeHash, bytes setupParams)",
      "function validateContractCall(bytes32 commandId, string sourceChain, string sourceAddress, bytes32 payloadHash) returns (bool valid)",
      "function validateContractCallAndMint(bytes32 commandId, string sourceChain, string sourceAddress, bytes32 payloadHash, string symbol, uint256 amount) returns (bool valid)"
    ]
  }
}
